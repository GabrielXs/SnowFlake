package dev.gabriel.snowflake

import dev.gabriel.snowflake.config.Structure
import kotlinx.coroutines.Deferred
import kotlinx.coroutines.async
import kotlinx.coroutines.awaitAll
import kotlinx.coroutines.runBlocking
import org.junit.Assert
import org.junit.Test

import org.junit.Assert.*
import java.util.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class SnowFlakeTest {


    @Test
    fun `Should throw an exception when machineId is set to its maximum value`() {
        assertThrows(IllegalArgumentException::class.java) {
            SnowflakeGenerator.nextId(1023)
        }

    }


    @Test
    fun `Should generate unique ids for multiple calls`() {
        val ids = mutableListOf<Long>()
        for (i in 1..4000) {
            ids.add(SnowflakeGenerator.nextId(1022))
        }

        assertTrue(ids.distinct().isNotEmpty())
    }

    @Test
    fun `Generating ID with Max Sequence Results in New Timestamp and Zero Sequence`() {
        val time = Date().time
        val structure = Structure.createDefault()

        val listIds = mutableListOf<Long>()
        repeat(structure.maxSequence().toInt() + 2) {
            listIds.add(SnowflakeGenerator.nextId(1000, time))
        }

        val sequence = SnowflakeGenerator.extractSequence(listIds[listIds.lastIndex - 1], structure)
        assertTrue("sequence $sequence, max sequence ${structure.maxSequence()}", sequence == structure.maxSequence())
        assertTrue(SnowflakeGenerator.extractSequence(listIds.last(), structure).toInt() == 0)

    }


    @Test
    fun `Should have equal timestamp when generating an ID`() {
        val time = Date().time
        val id = SnowflakeGenerator.nextId(1000, time)
        assertEquals(time, SnowflakeGenerator.extractTimeStamp(id))
    }

    @Test
    fun `Should have equal machineId when generating an ID`() {
        val machineId = 1000
        val id = SnowflakeGenerator.nextId(machineId)
        assertEquals(machineId, SnowflakeGenerator.extractMachineId(id))
    }

    @Test
    fun `Max ID generated by default structure every millisecond`() = runBlocking {
        val maxId = 4189185
        val structure = Structure.createDefault()
        assertEquals(maxId, (structure.maxSequence() * structure.maxMachineIds()))
    }
}